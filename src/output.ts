import * as path from 'path';
import { merge } from 'lodash';
import { mkdir, writeFile } from 'mz/fs';
import { GeneratedCode, FrameworkMap, Runtime } from './types';
import { spawn } from './utils';
import { join } from 'path';

const tsconfigBase = {
  version: '2.4.2',
  compilerOptions: {
    lib: ['es2017', 'esnext'],
    target: 'es2017',
    module: 'commonjs',
    moduleResolution: 'node',
    typeRoots: ['./node_modules/@types'],
    emitDecoratorMetadata: true,
    experimentalDecorators: true,
    sourceMap: true,
    declaration: true,
    strict: true,
    outDir: '.',
  },
  include: [
    'src/*.ts',
  ],
  exclude: [
    'node_modules',
  ],
};

const tsconfig: Record<Runtime, any> = {
  [Runtime.browser]: merge(tsconfigBase, {
    compilerOptions: {
      lib: [...tsconfigBase.compilerOptions.lib, 'dom'],
    },
  }),
  [Runtime.node]: tsconfigBase,
};

function pathTo(...elements: string[]) {
  return require.resolve(join(...elements));
}

export class TSOutput {
  protected npm: (...args: string[]) => Promise<number>;
  protected tsc: (...args: string[]) => Promise<number>;

  private npmPath = pathTo('npm', 'bin', 'npm-cli.js');
  private tscPath = pathTo('typescript', 'bin', 'tsc');

  constructor(protected readonly genPath: string) {
    this.npm = (...args: string[]) => spawn('node', [this.npmPath, ...args], { cwd: genPath, stdio: 'inherit' });
    this.tsc = (...args: string[]) => spawn(this.tscPath, args, { cwd: genPath, stdio: 'inherit' });
  }

  public async write(
    runtime: Runtime,
    name: string,
    version: string,
    license: string,
    { code, pkg: basePackage }: GeneratedCode,
    { client, server }: FrameworkMap
  ) {
    await mkdir(this.genPath);

    try {
      await mkdir(path.join(this.genPath, 'src'));
    } catch (err) {
      if (err.code !== 'EEXIST') {
        throw err;
      }
    }
    await Promise.all(Object.entries(code).map(
      ([n, c]) => writeFile(path.join(this.genPath, 'src', n), c)
    ));
    await writeFile(path.join(this.genPath, 'tsconfig.json'), JSON.stringify(tsconfig[runtime]));
    const main = client && server ? 'interfaces' : client ? 'client' : 'server';

    const pkg = {
      ...basePackage,
      main: `${main}.js`,
      description: 'Generated by concord',
      repository: 'undefined',
      types: `${main}.d.ts`,
      name,
      version,
      license,
    };
    await writeFile(path.join(this.genPath, 'package.json'), JSON.stringify(pkg));
  }

  public async compile(): Promise<void> {
    await this.npm('i');
    await this.tsc();
  }

  public async publish(tag?: string): Promise<void> {
    if (tag) {
      await this.npm('publish', '--tag', tag);
    } else {
      await this.npm('publish');
    }
  }
}
