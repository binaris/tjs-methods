import { ValidationError } from './common';
import { validateClass } from './serverCommon';
import {
  schema,
  InternalServerError,
  {{#exceptions}}
  {{name}},
  {{/exceptions}}
  {{#classes}}
  {{name}},
  {{/classes}}
  {{#enums}}
  {{name}},
  {{/enums}}
  {{#bypassTypes}}
  {{name}},
  {{/bypassTypes}}
} from './interfaces';

{{#serverOnlyContext}}

export { ServerOnlyContext };
export type ContextExtractor = () => Promise<ServerOnlyContext>;
{{/serverOnlyContext}}
{{#serverContext}}
export type Context = {{{serverContext}}};
{{/serverContext}}
{{#classes}}
{{^attributes}}

const {{{name}}}Validator = validateClass(schema, '{{{name}}}');

export interface {{{name}}}Handler {
  {{#methods}}
  {{{name}}}({{#serverContext}}ctx: Context, {{/serverContext}}{{#parameters}}{{{name}}}{{#optional}}?{{/optional}}: {{{type}}}{{^last}}, {{/last}}{{/parameters}}): Promise<{{{returnType}}}>;
  {{/methods}}
}
{{#methods}}

export async function exec{{{className}}}{{{name}}}(body: any, fn: {{{className}}}Handler['{{{name}}}']{{#serverOnlyContext}}, extractContext: ContextExtractor{{/serverOnlyContext}}, stackTraceInError: boolean = false) {
  let context: {{#serverContext}}Context{{/serverContext}}{{^serverContext}}{}{{/serverContext}} | undefined;
  try {
    {{{className}}}Validator('{{{name}}}', body);
    const { context: clientContextFromBody, args } = body;

    {{#clientContext}}
    const clientContext = clientContextFromBody as ClientContext;
    {{/clientContext}}
    {{^clientContext}}
    const clientContext = {};
    {{/clientContext}}
    {{#serverOnlyContext}}
    const serverOnlyContext = await extractContext();
    {{/serverOnlyContext}}
    {{^serverOnlyContext}}
    const serverOnlyContext = {};
    {{/serverOnlyContext}}
    context = { ...clientContext, ...serverOnlyContext };
    {{#serverContext}}
    return {
      status: 200,
      body: await fn(context{{#parameters}}, args.{{{name}}}{{/parameters}}),
      context,
    };
    {{/serverContext}}
    {{^serverContext}}
    return {
      status: 200,
      body: await fn({{#parameters}}args.{{{name}}}{{^last}}, {{/last}}{{/parameters}}),
      context,
    };
    {{/serverContext}}
  } catch (error) {
    const { stack, message, ...rest } = error;
    const processedError = stackTraceInError ? { stack: stack ? stack.toString() : undefined, ...rest } : rest;
    if (error instanceof ValidationError) {
      return {
        status: 400,
        error,
        body: {
          name: 'ValidationError',
          message,
          errors: error.errors,
        },
        context,
      };
    }
    {{#throws}}
    if (error instanceof {{{.}}}) {
      return {
        status: 500,
        error,
        body: {
          ...processedError,
          message,
          name: '{{{.}}}',
        },
        context,
      };
    }
    {{/throws}}
    return {
      status: 500,
      error,
      body: {
        ...processedError,
        message,
        name: 'InternalServerError',
      },
      context,
    };
  }
}
{{/methods}}
{{/attributes}}
{{/classes}}
